"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const executeFunctionIfExists_1 = __importDefault(require("./executeFunctionIfExists"));
const getAwsSecret_1 = __importDefault(require("./getAwsSecret"));
const getConnectorSecret_1 = __importDefault(require("./getConnectorSecret"));
const getSingletonSecret_1 = __importDefault(require("./getSingletonSecret"));
const fs_1 = require("fs");
function getSecrets({ connectors, preknowns, singleton, pass019 }) {
    return __awaiter(this, void 0, void 0, function* () {
        const secretsObj = {};
        if (process.env.USE_AWS === "true") {
            if (connectors)
                yield handleSecretsFromAws(connectors, secretsObj);
            if (preknowns)
                yield handleSecretsFromAws(preknowns, secretsObj);
            if (singleton)
                secretsObj[singleton.name] = yield (0, getAwsSecret_1.default)(process.env[`SINGELTON_SECRET_NAME`]);
            if (pass019)
                secretsObj["pass019"] = yield (0, getAwsSecret_1.default)("pass019");
        }
        else {
            if (connectors)
                yield handleConnectorSecrets(connectors, secretsObj);
            if (preknowns)
                yield handlePreknownSecrets(preknowns, secretsObj);
            if (singleton)
                secretsObj[singleton.name] = yield (0, getSingletonSecret_1.default)(singleton);
            if (pass019)
                secretsObj["pass019"] = yield (0, fs_1.readFileSync)(process.env.PASS019, "utf-8");
        }
        return secretsObj;
    });
}
const handleSecretsFromAws = (secretsConfArr, secretsArr) => __awaiter(void 0, void 0, void 0, function* () {
    for (let i = 0; i < secretsConfArr.length; i++) {
        // if (!!process.env[`${secretsConfArr[i].alias}_SECRET_NAME`])
        secretsArr[secretsConfArr[i].name] = yield (0, getAwsSecret_1.default)(process.env[`${secretsConfArr[i].alias}_SECRET_NAME`]);
    }
});
const handleConnectorSecrets = (connectors, secretsArr) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        for (let i = 0; i < connectors.length; i++) {
            let secretConfig = connectors[i];
            secretConfig = Object.assign(Object.assign({}, secretConfig), (0, executeFunctionIfExists_1.default)(secretConfig));
            secretsArr[secretConfig.name] = yield (0, getConnectorSecret_1.default)(secretConfig);
        }
    }
    catch (error) {
        console.error('error in handleConnectorSecrets: ', error);
        throw error;
    }
});
const handlePreknownSecrets = (preknowns, secretsArr) => {
    for (let i = 0; i < preknowns.length; i++) {
        const modifiedValue = (0, executeFunctionIfExists_1.default)(preknowns[i].value);
        secretsArr[preknowns[i].name] = modifiedValue;
    }
};
exports.default = getSecrets;
